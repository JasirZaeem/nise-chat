/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as RegisterImport } from './routes/register'
import { Route as LoginImport } from './routes/login'
import { Route as AppImport } from './routes/_app'
import { Route as AppIndexImport } from './routes/_app/index'
import { Route as ShareShareIdImport } from './routes/share/$shareId'
import { Route as AppSettingsImport } from './routes/_app/settings'
import { Route as AppThreadThreadIdImport } from './routes/_app/thread/$threadId'

// Create/Update Routes

const RegisterRoute = RegisterImport.update({
  id: '/register',
  path: '/register',
  getParentRoute: () => rootRoute,
} as any)

const LoginRoute = LoginImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRoute,
} as any)

const AppRoute = AppImport.update({
  id: '/_app',
  getParentRoute: () => rootRoute,
} as any)

const AppIndexRoute = AppIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AppRoute,
} as any)

const ShareShareIdRoute = ShareShareIdImport.update({
  id: '/share/$shareId',
  path: '/share/$shareId',
  getParentRoute: () => rootRoute,
} as any)

const AppSettingsRoute = AppSettingsImport.update({
  id: '/settings',
  path: '/settings',
  getParentRoute: () => AppRoute,
} as any)

const AppThreadThreadIdRoute = AppThreadThreadIdImport.update({
  id: '/thread/$threadId',
  path: '/thread/$threadId',
  getParentRoute: () => AppRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_app': {
      id: '/_app'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AppImport
      parentRoute: typeof rootRoute
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginImport
      parentRoute: typeof rootRoute
    }
    '/register': {
      id: '/register'
      path: '/register'
      fullPath: '/register'
      preLoaderRoute: typeof RegisterImport
      parentRoute: typeof rootRoute
    }
    '/_app/settings': {
      id: '/_app/settings'
      path: '/settings'
      fullPath: '/settings'
      preLoaderRoute: typeof AppSettingsImport
      parentRoute: typeof AppImport
    }
    '/share/$shareId': {
      id: '/share/$shareId'
      path: '/share/$shareId'
      fullPath: '/share/$shareId'
      preLoaderRoute: typeof ShareShareIdImport
      parentRoute: typeof rootRoute
    }
    '/_app/': {
      id: '/_app/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof AppIndexImport
      parentRoute: typeof AppImport
    }
    '/_app/thread/$threadId': {
      id: '/_app/thread/$threadId'
      path: '/thread/$threadId'
      fullPath: '/thread/$threadId'
      preLoaderRoute: typeof AppThreadThreadIdImport
      parentRoute: typeof AppImport
    }
  }
}

// Create and export the route tree

interface AppRouteChildren {
  AppSettingsRoute: typeof AppSettingsRoute
  AppIndexRoute: typeof AppIndexRoute
  AppThreadThreadIdRoute: typeof AppThreadThreadIdRoute
}

const AppRouteChildren: AppRouteChildren = {
  AppSettingsRoute: AppSettingsRoute,
  AppIndexRoute: AppIndexRoute,
  AppThreadThreadIdRoute: AppThreadThreadIdRoute,
}

const AppRouteWithChildren = AppRoute._addFileChildren(AppRouteChildren)

export interface FileRoutesByFullPath {
  '': typeof AppRouteWithChildren
  '/login': typeof LoginRoute
  '/register': typeof RegisterRoute
  '/settings': typeof AppSettingsRoute
  '/share/$shareId': typeof ShareShareIdRoute
  '/': typeof AppIndexRoute
  '/thread/$threadId': typeof AppThreadThreadIdRoute
}

export interface FileRoutesByTo {
  '/login': typeof LoginRoute
  '/register': typeof RegisterRoute
  '/settings': typeof AppSettingsRoute
  '/share/$shareId': typeof ShareShareIdRoute
  '/': typeof AppIndexRoute
  '/thread/$threadId': typeof AppThreadThreadIdRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/_app': typeof AppRouteWithChildren
  '/login': typeof LoginRoute
  '/register': typeof RegisterRoute
  '/_app/settings': typeof AppSettingsRoute
  '/share/$shareId': typeof ShareShareIdRoute
  '/_app/': typeof AppIndexRoute
  '/_app/thread/$threadId': typeof AppThreadThreadIdRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | ''
    | '/login'
    | '/register'
    | '/settings'
    | '/share/$shareId'
    | '/'
    | '/thread/$threadId'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/login'
    | '/register'
    | '/settings'
    | '/share/$shareId'
    | '/'
    | '/thread/$threadId'
  id:
    | '__root__'
    | '/_app'
    | '/login'
    | '/register'
    | '/_app/settings'
    | '/share/$shareId'
    | '/_app/'
    | '/_app/thread/$threadId'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  AppRoute: typeof AppRouteWithChildren
  LoginRoute: typeof LoginRoute
  RegisterRoute: typeof RegisterRoute
  ShareShareIdRoute: typeof ShareShareIdRoute
}

const rootRouteChildren: RootRouteChildren = {
  AppRoute: AppRouteWithChildren,
  LoginRoute: LoginRoute,
  RegisterRoute: RegisterRoute,
  ShareShareIdRoute: ShareShareIdRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/_app",
        "/login",
        "/register",
        "/share/$shareId"
      ]
    },
    "/_app": {
      "filePath": "_app.tsx",
      "children": [
        "/_app/settings",
        "/_app/",
        "/_app/thread/$threadId"
      ]
    },
    "/login": {
      "filePath": "login.tsx"
    },
    "/register": {
      "filePath": "register.tsx"
    },
    "/_app/settings": {
      "filePath": "_app/settings.tsx",
      "parent": "/_app"
    },
    "/share/$shareId": {
      "filePath": "share/$shareId.tsx"
    },
    "/_app/": {
      "filePath": "_app/index.tsx",
      "parent": "/_app"
    },
    "/_app/thread/$threadId": {
      "filePath": "_app/thread/$threadId.tsx",
      "parent": "/_app"
    }
  }
}
ROUTE_MANIFEST_END */
